#OOP345 

note -> this reflection best viewed on a text editor WITHOUT word wrap

Workshop 2 Reflection

In this workshop I have learned
	
	- anonymous structs
		- a struct is like a class, but it is public by default
		- a struct can be declared/defined anonymously, meaning without a name
		- an anonymous struct has no name or tag
		- it is not considered as an object
		- how to define an anonymous struct:
							struct 
							{
								const char* messageString;
								const char* unitsOfTime;
								std::chrono::steady_clock::duration durationTime;
							} record[maxNumOfRecords];

	- unions
		- a user-defined custom type
		- like a struct, it can be used to set the behaviors for an object
		- however, unlike a struct, it cannot use more than one data member at the same time
		- an object of type union can only use one data member at a time
		- a union only allocates enough memory for the largest data member, because at any time, only one member will be used
		- how to define a union:		
						union Book
						{
					                int bookId;
					                char bookName[50];
						};
						
						Book bookOne; //can only use bookId OR bookName at a time

	- std::chrono
		- a member of the std namespace
		- used to manage time
		- steady_clock
			- used like a stop watch
			- you create a time_point object, and you can manage time with it
			- you can also calculate the duration between those objects
		- how to use it
			- create an std::chrono::steady_clock::time_point object
			- set it to a the current snapshot of time by calling std::chrono::steady_clock::now();
				- now() is a member function of steady_clock that returns the current time in timepoints
			- make another time_point object
			- call now() on that as well
			- now make a duration object (std::chrono::steady_clock::duration)
			- calculate the duration between timepoints --> durationObject = (endTimeObject - startTimeObject)
			- now print it by calling count(); member function on durationObject
			
	- copy constructors & copy assignment operators
		- to be used ANY and EVERY time you are working with dynamic memory
		- used for copying a pre-existing object into a new object
		- copy constructor 
			- used for copying pre existing object to NEW object
		- copy assignment operator
			- used for copying pre existing to another pre existing object
		- make your code more efficient by calling copy assignment operator from the copy constructor (as they both follow the same design principals)
			- *this = newObject;
		 ** (don't forget it is still a constructor, it is best to set the instance variables to a safe empty state first) **			
		- how to make a copy assignment operator
			- check for self assignment
			- shallow copy any non resource variables
			- check for nullptr in any resource dependant variables
			- if not nullptr, deallocate the existing memory for any resource dependant variables
			- reallocate memory based on the resource variable of the object your are recieving
			- copy over elements from incoming object to new object
			- return reference to newly copied object
		- here is an example
			- copy constructor
			
				Text::Text(const Text & incomingTextObj) 
				{				
					strArray = nullptr;
					*this = incomingTextObj; 		
				}
			
			- copy assignment operator
			
				Text & Text::operator=(const Text & incomingObj) 
				{
					if (this != &incomingObj) 
					{
						this->numOfStringsCurrentlyStored = incomingObj.numOfStringsCurrentlyStored; 
						delete[]this->strArray;
						this->strArray = nullptr;
						this->strArray = new string[incomingObj.strArray->length()]; 
						for (long unsigned int index = 0; index < incomingObj.strArray->length(); index++)
						{
							this->strArray[index] = incomingObj.strArray[index];
						}
					}
					return *this;
				}			
	
	- move constructors & move assignment operators
		- it's kind of like a copy constructor/assignment operator, but the end goal is to change the ownership (addresses) from the incoming object to the old object
		- basically, you overload the compiler given move constructor with your own (written for your custom type)
		- you call a copy constructor (compiler provided or your own) using 
											objectYouWantToMoveTo = std::move(objectYouWantToMoveFrom);
		- like a copy constructor, a move constructor is used to move to a NEW object, whereas a move assignment operator is used to move to an pre-existing object
		** (don't forget it is still a constructor, it is best to set the instance variables to a safe empty state first) **			
		- how to make a move assignment operator
			- check for self assignment
			- shallow copy any non resource variables
			- deallocate any resource dependant variables of the object that you are copying to 
			- assign the address from the incoming object's resource dependant variables to the resource dependant variables of the object that you want to copy to
			- set the incoming object's resource dependant variables to nullptr
			- return a referance to the current object
		- here is an example
			- move constructor
				Text::Text(Text && incomingObj)
				{
					this->strArray = nullptr;
					*this = move(incomingObj);
				}
			- move assignment operator
					Text & Text::operator=(Text && incomingObj)
					{
						if (this != &incomingObj)
						{
							this->numOfStringsCurrentlyStored = incomingObj.numOfStringsCurrentlyStored;
							incomingObj.numOfStringsCurrentlyStored = 0;
							if (this->strArray != nullptr)
							{
									delete[]this->strArray;
									strArray = nullptr;
							}
							this->strArray = incomingObj.strArray;
							incomingObj.strArray = nullptr;
						}
						return *this;
					}	
				
				
How I upgraded my code in w2_at_home
	- Updated w2.cpp by adding a call to the move constructor:
									t.start(); //start the stopwatch
									Text d = std::move(b); //calling move constructor on 'd' object. as you can see, 'd' is a newly created object. It means that I want to move the contents of 'b' object INTO the 'd' object
									t.stop(); //stop the stopwatch
									t.recordEvent("Move Constructor "); //pass the string "Move Constructor" to recordEvent of the t (Timekeeper) object
									std::cout << "Move Constructor  - d.size = " << d.size() << std::endl; //print out the string along with the size (returned from size() query)
																
	- Updated w2.cpp by adding a call to the move assignment operator:
										t.start(); //start the stopwatch
										a = std::move(c); //calling move assignment operator on 'a' object. It means that I want to move the contents of 'c' object INTO the 'a' object
										t.stop(); //stop the stopwatch
										t.recordEvent("Move Assignment "); //pass the string "Move Constructor" to recordEvent of the t (Timekeeper) object
										std::cout << "Move Assignment  - a.size = " << a.size() << std::endl; //print out the string along with the size (returned from size() query)
	
	- Updated Text.h and Text.cpp with declarations and definitions of the move constructor and move assignment operator respectably 
												
								#Text.h										
								//move constructor
									Text(Text&& incomingObj);
								//move assignment operator
									Text& operator=(Text&& incomingObj);
								
								#Text.cpp
								//move constructor
									Text::Text(Text && incomingObj)
									{
										this->strArray = nullptr;
										*this = move(incomingObj);
									}
								
								//move assignment operator
									Text & Text::operator=(Text && incomingObj)
									{
										if (this != &incomingObj)
										{
											this->numOfStringsCurrentlyStored = incomingObj.numOfStringsCurrentlyStored;
											if (this->strArray != nullptr)
											{
											delete[]this->strArray;
											strArray = nullptr;
											}
											this->strArray = incomingObj.strArray;
											incomingObj.strArray = nullptr;
										}
										return *this;
									}

Quiz Reflection : 

QUESTIONS =>

1 A concrete class can include a pure virtual function (choose one of)
	True _____	False _______
2 A polymorphic object can have different types throughout its lifetime (choose one of)
	True _____	False _______
3 A polymorphic object needs a _______ function to manage the copying of its current dynamic type.
4 “A function that uses pointers or references to base classes must be able to use objects of derived classes without knowing it”. 
	This is called the _____________________________ Principle.
5 A non-type template parameter can be a float or a double (choose one of)
	True _____	False _______
6 Complete and upgrade the following template definition to manage a List containing an array of any type and of size max. Let the type default to a long and the size default to 100:
	template <                                      >
	class List {
          int a[max]{};
          int no {0}; 
        public:
          int& operator[](int i) { return a[i]; }
          int operator[](int i) const { return a[i]; }
      };


ANSWERS =>

1) False
2) True
3) clone
4) Liskov's Substitution Principal
5) False
6) 	template <typename T = long, int max = 100>
	class List {
		T a[max]{};
		T no {0};
	public:
		T& operator[](int i) { return a[i]; }
		T operator[](int i) const { return a[i]; }

