

				accumulatedX = std::accumulate(xValue.begin(), xValue.end(), 0.0);
				accumulatedY = std::accumulate(yValue.begin(), yValue.end(), 0.0);

				xMean = std::accumulate(yValue.begin(), yValue.end(), 0.0) / xValue.size();
				yMean = accumulatedY / yValue.size();

				{
					T temp{0.0f};
					for (size_t index = 0; index < xValue.size(); index++)
					{
						temp += pow((xValue.at(index) - xMean), 2);
					}
					XstandardDeviation = std::sqrt(temp / (xValue.size() - 1));
				}

				{
					T temp{0.0f};
					for (size_t index = 0; index < yValue.size(); index++)
					{
						temp += pow((yValue.at(index) - yMean), 2);
					}
					YstandardDeviation = std::sqrt(temp / (yValue.size() - 1));
				}

				{
					T temp{0.0f};
					for (size_t index = 0; index < xValue.size(); index++)
					{
						temp += (xValue.at(index) - xMean) * (yValue.at(index) - yMean);
					}
					T temp2 = temp / (XstandardDeviation * YstandardDeviation);
					T temp3 = temp2 / (xValue.size() - 1);
					XYcorrelation = temp3;
				}

				{
					std::deque<T> temp;
					temp = yValue;
					size_t sizeOfVector = std::size(temp);
					std::sort(temp.begin(), temp.end());
					median = temp.at(sizeOfVector / 2);
				}

				// XYslope = XYcorrelation * (YstandardDeviation / XstandardDeviation);

				Yintercept = yMean - (XYslope * xMean);


			T accumulatedX{};
			T accumulatedY{};
			T xMean{};
			T yMean{};
			T XstandardDeviation{};
			T YstandardDeviation{};
			T XYcorrelation{};
			// T XYslope{};
			T Yintercept{};
			T median{};

			int numOfRecords{0};

			T XYslope = [this](){ 
				return(XYcorrelation * (YstandardDeviation / XstandardDeviation));
			}; 
